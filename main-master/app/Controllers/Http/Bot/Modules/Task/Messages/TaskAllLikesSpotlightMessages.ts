import BufferTransactionsController from '../../../BufferTransactionsController'
import PostsController from '../../../PostsController'
import TasksActions from '../TasksActions'

export default class TaskAllLikesSpotlightMessagesController {
  public static async getActionMessage (inputValues) {
    const ActionResponse = {
      message: '',
      attachment: '',
      keyboard: {},
    }
    const currentSpotlightTask = await TasksActions.getCurrentSpotlightTask(inputValues)
    let postId = 0
    if(currentSpotlightTask) {
    const postById = await PostsController.getPostById(inputValues, currentSpotlightTask.id)
      if (postById) {
        ActionResponse.attachment = `wall${postById.owner_id}_${postById.post_id}`
        postId = postById.id
      }
    }
    ActionResponse.message = `–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –ü—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞.\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://vk.com/wall-128870047_105770\n\n`
    // const completedTaskByTransactions = await BufferTransactionsController.getByPostIdAndAction(inputValues, postId, 3)
    /*if(completedTaskByTransactions) {
      ActionResponse.message = ActionResponse.message + '–£ —Ç–µ–±—è —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã –±–∞–ª–ª—ã –∑–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–∞ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã—Ö –Ω–∞—á–∞–ª–∞—Ö :)\n\n'
    }*/
    ActionResponse.keyboard = {
      'one_time': false,
      'buttons': [
        [{
          'action': {
            'type': 'text',
            'payload': {TASK: `TASKSPOTCOMPLETE;${postId}`},
            'label': '‚úì –î–∞–ª–µ–µ',
          },
          'color': 'positive',
        }],
        [{
          'action': {
            'type': 'text',
            'payload': {CHATBOT: 'BACK'},
            'label': 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
          },
          'color': 'secondary',
        }],
      ],
    }
    return ActionResponse
  }
  public static async getActionCompleteMessage (inputValues) {
    const ActionResponse = {
      message: '',
      attachment: '',
      keyboard: {},
    }
    const currentSpotlightTask = await TasksActions.getCurrentSpotlightTask(inputValues)
    let postId = 0
    if(currentSpotlightTask) {
    const postById = await PostsController.getPostById(inputValues, currentSpotlightTask.id)
      if (postById) {
        ActionResponse.attachment = `wall${postById.owner_id}_${postById.post_id}`
        ActionResponse.message = `–°—É–ø–µ—Ä, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ!\n–î–µ—Ä–∂–∏ –Ω–æ–≤—ã–π –ø–æ—Å—Ç –∏–∑ –ü—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞.\n\n`
        postId = postById.id
      }
    }
    /*const completedTaskByTransactions = await BufferTransactionsController.getByPostIdAndAction(inputValues, postId, 3)
    if(completedTaskByTransactions) {
      ActionResponse.message = ActionResponse.message + '–£ —Ç–µ–±—è —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã –±–∞–ª–ª—ã –∑–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–∞ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã—Ö –Ω–∞—á–∞–ª–∞—Ö :)\n\n'
    }*/
    ActionResponse.keyboard = {
      'one_time': false,
      'buttons': [
        [{
          'action': {
            'type': 'text',
            'payload': {TASK: `TASKSPOTCOMPLETE;${postId}`},
            'label': '‚úì –î–∞–ª–µ–µ',
          },
          'color': 'positive',
        }],
        [{
          'action': {
            'type': 'text',
            'payload': {CHATBOT: 'BACK'},
            'label': 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
          },
          'color': 'secondary',
        }],
      ],
    }
    return ActionResponse
  }
}
