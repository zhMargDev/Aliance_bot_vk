import User from 'App/Models/Base/User'
import TasksActions from '../TasksActions'

export default class TaskAllLikesMessagesController {
  public static async getActionMessage (inputValues) {
    const ActionResponse = {
      message: '',
      attachment: '',
      keyboard: {},
    }
    const currentListTasks = await TasksActions.getListTasks(inputValues)
    let posts = ''
    let postsId = ''
    if (currentListTasks) {
      currentListTasks.forEach(post => {
        // @ts-ignore
        posts = posts + `\nhttps://vk.com/wall${post.owner_id}_${post.post_id}\n`
        // @ts-ignore
        postsId = postsId + `${post.id};`
      })
    }
    User.connection = inputValues.configGroup.database
    const userCurrent = await User.findBy('user_id', inputValues.peerId)
    let points = 0
    if (userCurrent) {
      points = userCurrent.points_all
    }
    // ActionResponse.message = '\n‚ù§‚ûïüí¨ –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∫–∞–∫ –∑–∞ –ª–∞–π–∫, —Ç–∞–∫ –∏ –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.'
    // ActionResponse.message = `${ActionResponse.message}\nüî•–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "‚úì –î–∞–ª–µ–µ" –±–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª—è—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç —Ç–µ–±–µ –ø–æ–∫–∞–∑–∞–Ω—ã.`
    // ActionResponse.message = `${ActionResponse.message}\nüé±–û–±—â–∏—Ö –±–∞–ª–ª–æ–≤: ${points}`
    ActionResponse.message = `${ActionResponse.message}\n\n–¢—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ.\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ –ø–æ—Å—Ç—ã:20.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 30.`
    ActionResponse.message = `${ActionResponse.message}
    ${posts}
    `
    ActionResponse.keyboard = {
      'one_time': false,
      'buttons': [
        [{
          'action': {
            'type': 'text',
            'payload': {TASK: `TASKLISTCOMPLETE;${postsId}`},
            'label': '‚úì –î–∞–ª–µ–µ',
          },
          'color': 'positive',
        }],
        [{
          'action': {
            'type': 'text',
            'payload': {CHATBOT: 'BACK'},
            'label': 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
          },
          'color': 'secondary',
        }],
      ],
    }
    return ActionResponse
  }
  public static async getActionCompleteMessage (inputValues) {
    const ActionResponse = {
      message: '',
      attachment: '',
      keyboard: {},
    }
    const currentListTasks = await TasksActions.getListTasks(inputValues)
    let posts = ''
    let postsId = ''
    if (currentListTasks) {
      currentListTasks.forEach(post => {
        // @ts-ignore
        posts = posts + `\nhttps://vk.com/wall${post.owner_id}_${post.post_id}\n`
        // @ts-ignore
        postsId = postsId + `${post.id};`
      })
    }
    /*if (pointsAll === 3000) {
      ActionResponse.message = `\n–£–ø—Å! –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –ø–æ–∫–∞ –Ω–µ –¥–∞—ë—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç—Ç–∏–º –ø–æ—Å—Ç–∞–º, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª–∏—Ç —Ç–µ–±–µ –±–∞–ª–ª—ã –∑–∞ —ç—Ç–∏ –ø–æ—Å—Ç—ã. –ê –ø–æ–∫–∞ –¥–µ—Ä–∂–∏ –Ω–æ–≤—ã–µ:
      ${posts}`
    } else if (pointsAll === 0) {
      ActionResponse.message = `\n‚úñ –ñ–∞–ª—å, —á—Ç–æ —Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ—à—å —ç—Ç–∏ –ø–æ—Å—Ç—ã.
      –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—à—å, –∑–Ω–∞—á–∏—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –æ—Ç–¥–∞—ë—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç—Ç–∏–º –ø–æ—Å—Ç–∞–º.
      –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –∞–≤—Ç–æ–∑–∞—á—ë—Ç –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç –∏ —É —Ç–µ–±—è –Ω–µ –ø—Ä–æ–ø–∞–¥—ë—Ç –Ω–∏ –æ–¥–∏–Ω –±–∞–ª–ª.
      –ê –ø–æ–∫–∞ –¥–µ—Ä–∂–∏ –Ω–æ–≤—ã–µ:
      ${posts}`
    } else if (pointsAll > 0) {
      ActionResponse.message = `\n–°—É–ø–µ—Ä, –±–∞–ª–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${pointsAll}\n–í–æ—Ç –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ:
      ${posts}`
    } else {
      ActionResponse.message = '\n–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –º—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è)'
    }*/
    // ActionResponse.message = `–û—Ç–ª–∏—á–Ω–æ, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ!\n–ú—ã –∏–∑–º–µ–Ω–∏–ª–∏ –ª–æ–≥–∏–∫—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–±–ª–µ–º—ã –í–ö –Ω–µ —Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –Ω–∞—à–∏–º–∏.\n–í –±–ª–∏–∂–∞–π—à–∏–µ –º–∏–Ω—É—Ç 10-20 —Å–∏—Å—Ç–µ–º–∞ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –Ω–∞—á–∏—Å–ª–∏—Ç —Ç–µ–±–µ –ø—Ä–∏—á–∏—Ç–∞—é—â–µ–µ—Å—è)\n–ê –ø–æ–∫–∞ –≤–æ—Ç –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏:\n\n${posts}`
    ActionResponse.message = `–û—Ç–ª–∏—á–Ω–æ, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ!\n–ê –ø–æ–∫–∞ –≤–æ—Ç –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏:\n\n${posts}`
    ActionResponse.keyboard = {
      'one_time': false,
      'buttons': [
        [{
          'action': {
            'type': 'text',
            'payload': {TASK: `TASKLISTCOMPLETE;${postsId}`},
            'label': '‚úì –î–∞–ª–µ–µ',
          },
          'color': 'positive',
        }],
        [{
          'action': {
            'type': 'text',
            'payload': {CHATBOT: 'BACK'},
            'label': 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
          },
          'color': 'secondary',
        }],
      ],
    }
    return ActionResponse
  }
}
