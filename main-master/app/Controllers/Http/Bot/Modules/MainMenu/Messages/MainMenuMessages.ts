import { DateTime } from "luxon";
import Group from "App/Models/Base/Group";
import User from "App/Models/Base/User";
import UsersController from "App/Controllers/Http/Bot/UsersController";
import PostsController from "App/Controllers/Http/Bot/PostsController";
import UsersInfoController from "App/Controllers/Http/Bot/UsersInfoController";
import BufferTransactionsController from "App/Controllers/Http/Bot/BufferTransactionsController";
import HelpersController from "App/Controllers/Http/Bot/HelpersController";

export default class MainMenuMessages {
  public static async getActionMessage(inputValues) {
    const ActionResponse = {
      message: "",
      attachment: "",
      keyboard: {},
    };
    await UsersController.changeBotStage(inputValues, 1);
    const countPosts = await PostsController.getActivePostsCount(inputValues);
    const countCommandPosts = await PostsController.getActiveCommandPostsCount(
      inputValues
    );
    const countSpotlightPosts =
      await PostsController.getActiveSpotlightPostsCount(inputValues);
    User.connection = inputValues.configGroup.database;
    const transactionsByUserId = await BufferTransactionsController.getByUserId(
      inputValues
    );
    const mainMessage = await this.getMainMessage(
      inputValues,
      transactionsByUserId
    );
    const statisticInfo = await this.getStatisticInfo(
      inputValues,
      transactionsByUserId
    );
    ActionResponse.message = mainMessage + statisticInfo;
    if (inputValues.configGroup.groupId === "325325325325") {
      ActionResponse.keyboard = {
        one_time: false,
        buttons: [
          [
            {
              action: {
                type: "text",
                payload: { TASK: "TALL" },
                label: `–ü–æ—Å—Ç—ã [${countPosts}]`,
              },
              color: "positive",
            },
          ],
          [
            {
              action: {
                type: "text",
                payload: { TASK: "TADD" },
                label: "üìù –î–æ–±–∞–≤–∏—Ç—å",
              },
              color: "primary",
            },
          ],
          [
            {
              action: {
                type: "text",
                payload: { SUPPORT: "START" },
                label: "üìù –ß–∞—Ç",
              },
              color: "secondary",
            },
            {
              action: {
                type: "text",
                payload: { CHATBOT: "INFO" },
                label: "üí° –ò–Ω—Ñ–∞",
              },
              color: "secondary",
            },
          ],
        ],
      };
    } else if (inputValues.configGroup.groupId === "325325325") {
      ActionResponse.message = `${ActionResponse.message}\n\n–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å—Ç–æ–≤: ${countPosts}`;
      if (countCommandPosts) {
        ActionResponse.message = `${ActionResponse.message}\n–î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: ${countCommandPosts}`;
      }
      Group.connection = inputValues.configGroup.database;
      let interest = await Group.query()
        // @ts-ignore
        .where("id", "=", inputValues.currentUser.group_id);
      if (interest.length > 0) {
        ActionResponse.message = `${ActionResponse.message}\n\n–¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞: ${interest[0].name}`;
      } else {
        ActionResponse.message = `${ActionResponse.message}\n\n–¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ`;
      }
      // if(inputValues.peerId === 3401169 || inputValues.peerId === 1111111111111111111) {
      if (countSpotlightPosts > 0) {
        ActionResponse.keyboard = {
          one_time: false,
          buttons: [
            [
              {
                action: {
                  type: "text",
                  payload: { TASK: "TALL" },
                  label: `–ü–æ—Å—Ç—ã [${countCommandPosts}]`,
                },
                color: "positive",
              },
              {
                action: {
                  type: "text",
                  payload: { TASK: "TALLLIKES" },
                  label: "–ü–æ—Å—Ç—ã [—Å–ø–∏—Å–∫–æ–º]",
                },
                color: "positive",
              },
            ],
            [
              {
                action: {
                  type: "text",
                  payload: { TASK: "TASKSPOTCOMPLETE" },
                  label: `–ü—Ä–æ–∂–µ–∫—Ç–æ—Ä [${countSpotlightPosts}]`,
                },
                color: "positive",
              },
            ],
            [
              {
                action: {
                  type: "text",
                  payload: { TASK: "TADD" },
                  label: "üìù –î–æ–±–∞–≤–∏—Ç—å",
                },
                color: "primary",
              },
            ],
            [
              {
                action: {
                  type: "text",
                  payload: { CHATBOT: "PROFILE" },
                  label: "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                },
                color: "primary",
              },
            ],
            [
              {
                action: {
                  type: "text",
                  payload: { CHATBOT: "INFO" },
                  label: "üí° –ò–Ω—Ñ–∞",
                },
                color: "secondary",
              },
            ],
          ],
        };
      } else {
        ActionResponse.keyboard = {
          one_time: false,
          buttons: [
            [
              {
                action: {
                  type: "text",
                  payload: { TASK: "TALL" },
                  label: `–ü–æ—Å—Ç—ã [${countCommandPosts}]`,
                },
                color: "positive",
              },
              {
                action: {
                  type: "text",
                  payload: { TASK: "TALLLIKES" },
                  label: "–ü–æ—Å—Ç—ã [—Å–ø–∏—Å–∫–æ–º]",
                },
                color: "positive",
              },
            ],
            [
              {
                action: {
                  type: "text",
                  payload: { TASK: "TADD" },
                  label: "üìù –î–æ–±–∞–≤–∏—Ç—å",
                },
                color: "primary",
              },
            ],
            [
              {
                action: {
                  type: "text",
                  payload: { CHATBOT: "PROFILE" },
                  label: "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                },
                color: "primary",
              },
            ],
            [
              {
                action: {
                  type: "text",
                  payload: { CHATBOT: "INFO" },
                  label: "üí° –ò–Ω—Ñ–∞",
                },
                color: "secondary",
              },
            ],
          ],
        };
      }
    } else if (inputValues.configGroup.groupId === "325325325324") {
      Group.connection = inputValues.configGroup.database;
      let interest = await Group.query()
        // @ts-ignore
        .where("id", "=", inputValues.currentUser.group_id);
      if (interest.length > 0) {
        ActionResponse.message = `${ActionResponse.message}\n\n–¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞: ${interest[0].name}`;
      } else {
        ActionResponse.message = `${ActionResponse.message}\n\n–¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ`;
      }
      ActionResponse.keyboard = {
        one_time: false,
        buttons: [
          [
            {
              action: {
                type: "text",
                payload: { TASK: "TALL" },
                label: `–ü–æ—Å—Ç—ã [${countPosts}]`,
              },
              color: "positive",
            },
          ],
          [
            {
              action: {
                type: "text",
                payload: { TASK: "TADD" },
                label: "üìù –î–æ–±–∞–≤–∏—Ç—å",
              },
              color: "primary",
            },
          ],
          [
            {
              action: {
                type: "text",
                payload: { CHATBOT: "PROFILE" },
                label: "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
              },
              color: "primary",
            },
          ],
          [
            {
              action: {
                type: "text",
                payload: { CHATBOT: "INFO" },
                label: "üí° –ò–Ω—Ñ–∞",
              },
              color: "secondary",
            },
          ],
        ],
      };
    } else if (inputValues.configGroup.groupId === "34543564356") {
      ActionResponse.keyboard = {
        one_time: false,
        buttons: [
          [
            {
              action: {
                type: "text",
                payload: { TASK: "TALL" },
                label: `–ü–æ—Å—Ç—ã [${countPosts}]`,
              },
              color: "positive",
            },
            {
              action: {
                type: "text",
                payload: { TASK: "TALLLIKES" },
                label: "–ü–æ—Å—Ç—ã [—Å–ø–∏—Å–∫–æ–º]",
              },
              color: "positive",
            },
          ],
          [
            {
              action: {
                type: "text",
                payload: { TASK: "TADD" },
                label: "üìù –î–æ–±–∞–≤–∏—Ç—å",
              },
              color: "primary",
            },
          ],
          [
            {
              action: {
                type: "text",
                payload: { CHATBOT: "INFO" },
                label: "üí° –ò–Ω—Ñ–∞",
              },
              color: "secondary",
            },
          ],
        ],
      };
    } else if (inputValues.configGroup.groupId === "345432543532") {
      Group.connection = inputValues.configGroup.database;
      let interest = await Group.query()
        // @ts-ignore
        .where("id", "=", inputValues.currentUser.group_id);
      if (interest.length > 0) {
        ActionResponse.message = `${ActionResponse.message}\n\n–¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞: ${interest[0].name}`;
      } else {
        ActionResponse.message = `${ActionResponse.message}\n\n–¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ`;
      }
      ActionResponse.keyboard = {
        one_time: false,
        buttons: [
          [
            {
              action: {
                type: "text",
                payload: { TASK: "TALL" },
                label: `–ü–æ—Å—Ç—ã [${countPosts}]`,
              },
              color: "positive",
            },
            {
              action: {
                type: "text",
                payload: { TASK: "TALLLIKES" },
                label: "–ü–æ—Å—Ç—ã [—Å–ø–∏—Å–∫–æ–º]",
              },
              color: "positive",
            },
          ],
          [
            {
              action: {
                type: "text",
                payload: { TASK: "TADD" },
                label: "üìù –î–æ–±–∞–≤–∏—Ç—å",
              },
              color: "primary",
            },
          ],
          [
            {
              action: {
                type: "text",
                payload: { CHATBOT: "INFO" },
                label: "üí° –ò–Ω—Ñ–∞",
              },
              color: "secondary",
            },
          ],
          [
            {
              action: {
                type: "text",
                payload: { CHATBOT: "POINTS" },
                label: "üîë Key",
              },
              color: "secondary",
            },
          ],
        ],
      };
    } else {
      Group.connection = inputValues.configGroup.database;
      let interest = await Group.query()
        // @ts-ignore
        .where("id", "=", inputValues.currentUser.group_id);
      if (interest.length > 0) {
        ActionResponse.message = `${ActionResponse.message}\n\n–¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞: ${interest[0].name}`;
      } else {
        ActionResponse.message = `${ActionResponse.message}\n\n–¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ`;
      }
      ActionResponse.keyboard = {
        one_time: false,
        buttons: [
          [
            {
              action: {
                type: "text",
                payload: { TASK: "TALL" },
                label: `–ü–æ—Å—Ç—ã [${countPosts}]`,
              },
              color: "positive",
            },
          ],
          [
            {
              action: {
                type: "text",
                payload: { TASK: "TADD" },
                label: "üìù –î–æ–±–∞–≤–∏—Ç—å",
              },
              color: "primary",
            },
          ],
          [
            {
              action: {
                type: "text",
                payload: { CHATBOT: "PROFILE" },
                label: "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
              },
              color: "primary",
            },
          ],
          [
            {
              action: {
                type: "text",
                payload: { SUPPORT: "START" },
                label: "üìù –ß–∞—Ç",
              },
              color: "secondary",
            },
            {
              action: {
                type: "text",
                payload: { CHATBOT: "INFO" },
                label: "üí° –ò–Ω—Ñ–∞",
              },
              color: "secondary",
            },
          ],
        ],
      };
    }
    return ActionResponse;
  }
  public static async getMainMessage(inputValues, transactionsByUserId) {
    const completedTransactions =
      HelpersController.filterTransactionByItemAndThisDay(
        transactionsByUserId,
        3
      );
    const lastCompletedTransactions = completedTransactions[0];
    const activePosts = HelpersController.filterTransactionByItemAndThisDay(
      transactionsByUserId,
      5
    );
    const lastActivePost = activePosts[0];
    // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ
    if (
      activePosts.length >= inputValues.configGroup.settings.max_active_post
    ) {
      let previousTime = lastActivePost.createdAt
        .setZone("Europe/Moscow")
        .setLocale("ru")
        .toFormat("d MMMM, t");
      // @ts-ignore
      let nextTimeTs =
        lastActivePost.createdAt.plus({
          hours: inputValues.configGroup.settings.hours_since_adding,
        }).ts - DateTime.local().ts;
      let nextTime = DateTime.local()
        .plus({ milliseconds: nextTimeTs })
        .setZone("Europe/Moscow")
        .setLocale("ru")
        .toFormat("d MMMM, t");
      return `‚òë –°—Ç–∞—Ç—É—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π\n–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Å—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω ${previousTime} (–ú–°–ö)\n–¢—ã —Å–º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–æ—Å—Ç ${nextTime} (–ú–°–ö)`;
    } else if (inputValues.configGroup.groupId === "342634654364") {
      return "‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π";
    } else if (
      completedTransactions.length <
      inputValues.configGroup.settings.min_task_day
    ) {
      return `‚òë –°—Ç–∞—Ç—É—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π\nüìù–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ ${inputValues.configGroup.settings.hours_since_adding} —á–∞—Å–∞: ${completedTransactions.length} –∏–∑ ${inputValues.configGroup.settings.min_task_day}`;
    } else {
      let activeTime = lastCompletedTransactions.createdAt
        .plus({ hours: 24 })
        .setZone("Europe/Moscow")
        .setLocale("ru")
        .toFormat("d MMMM, t");
      return `‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π\nüìù–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ –¥–æ ${activeTime} (–ú–°–ö)`;
    }
  }
  public static async getStatisticInfo(inputValues, transactionsByUserId) {
    let addedPosts = 0;
    let completedPosts = 0;
    let skippedPosts = 0;
    const UserInfo = await UsersInfoController.getInfoByUserId(inputValues);
    if (UserInfo) {
      addedPosts = UserInfo.added;
      completedPosts = UserInfo.completed;
      skippedPosts = UserInfo.skipped;
    }
    if (!["5432543254325"].includes(inputValues.configGroup.groupId)) {
      const userPoints = await this.getUserPoints(
        inputValues,
        transactionsByUserId
      );
      return `\n
        –û–±—â–∏—Ö –±–∞–ª–ª–æ–≤: ${inputValues.currentUser.points_all}
        –ë–∞–ª–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:
          - –ë–æ—Ç: ${userPoints.UserPointsForLastDay}
          - –ê–≤—Ç–æ–∑–∞—á—ë—Ç: ${userPoints.UserPointsForLastDayAuto}
          - –í—Å–µ–≥–æ: ${userPoints.UserAllPoints}

        ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: ${addedPosts}
        ‚úî –û—Ü–µ–Ω–µ–Ω–æ: ${completedPosts}
        ‚úñ –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedPosts}`;
    }
    return "";
  }
  public static async getUserPoints(inputValues, transactionsByUserId) {
    /* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ */
    let UserPointsForLastDay = 0;
    let UserPointsForLastDayAuto = 0;
    let LikesForLastDay;
    let CommentsForLastDay;
    let LikesForLastDayAuto;
    let CommentsForLastDayAuto;
    if (inputValues.configGroup.groupId === "32532523153215") {
      LikesForLastDay = HelpersController.filterTransactionByItemAndThisDay(
        transactionsByUserId,
        1,
        1
      );
      CommentsForLastDay = HelpersController.filterTransactionByItemAndThisDay(
        transactionsByUserId,
        2,
        1
      );
      LikesForLastDayAuto = HelpersController.filterTransactionByItemAndThisDay(
        transactionsByUserId,
        1,
        2
      );
      CommentsForLastDayAuto =
        HelpersController.filterTransactionByItemAndThisDay(
          transactionsByUserId,
          2,
          2
        );
    } else {
      LikesForLastDay = HelpersController.filterTransactionByItem(
        transactionsByUserId,
        1,
        1
      );
      CommentsForLastDay = HelpersController.filterTransactionByItem(
        transactionsByUserId,
        2,
        1
      );
      LikesForLastDayAuto = HelpersController.filterTransactionByItem(
        transactionsByUserId,
        1,
        2
      );
      CommentsForLastDayAuto = HelpersController.filterTransactionByItem(
        transactionsByUserId,
        2,
        2
      );
    }
    LikesForLastDay.forEach((transaction) => {
      if (transaction.data) {
        // @ts-ignore
        UserPointsForLastDay = UserPointsForLastDay + transaction.data.points;
      }
    });
    CommentsForLastDay.forEach((transaction) => {
      if (transaction.data) {
        // @ts-ignore
        UserPointsForLastDay = UserPointsForLastDay + transaction.data.points;
      }
    });
    LikesForLastDayAuto.forEach((transaction) => {
      if (transaction.data) {
        // @ts-ignore
        UserPointsForLastDayAuto =
          UserPointsForLastDayAuto + transaction.data.points;
      }
    });
    CommentsForLastDayAuto.forEach((transaction) => {
      if (transaction.data) {
        // @ts-ignore
        UserPointsForLastDayAuto =
          UserPointsForLastDayAuto + transaction.data.points;
      }
    });
    return {
      UserAllPoints: UserPointsForLastDay + UserPointsForLastDayAuto,
      UserPointsForLastDay,
      UserPointsForLastDayAuto,
    };
  }
}
